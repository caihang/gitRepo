git:
工作区 -> 暂存区stage -> master分支（初始化时HEAD默认指向master分支) #暂存区和分支统称为版本库

1.初始化仓库：git init
2.添加文件到暂存区:git add file1[, file2,...]  #如果要添加全部，则file改为 .或者-A
3.提交暂存区文件到当前分支:git commit [-m '本次提交说明，精准简短']  #commit类似于快照功能
4.查看当前仓库状态:git status 该命令查询哪些文件被修改过但还没准备提交
5.查看修改信息:git diff
6.查看提交历史记录:git log [--graph][--pretty=oneline][--abbrev-commit]
7.版本回退:git reset --hard <HEAD^/HEAD^^/HEAD~n/commit_id> #依次是退回到上一个/上上一个／前第n个/commit_id指向的版本
8.查看所有使用过的git命令记录:git reflog #此命令用来查找之前的commit_id来回退版本
9.查看工作区和版本库里某个文件的不同:git diff HEAD -- file_name #有修改的地方会以红色标明上一次提交的结果，以绿色表明当前工作区的修改
10.撤销工作区的修改以回到修改之前的状态:git checkout -- file_name  #其实是用版本库里的替换工作区里的
11.撤销暂存区的修改将其放回到工作区:git reset HEAD file_name, 然后就可以使用git checkout -- file_name， 注意：在这里执行这一步时会退回到最后一次commit的版本
12.撤销提交到分支的文件:使用版本回退，前提是未推送到远程
13.从版本库删除文件:git rm file_name  #如果一个文件被commit到版本库，在工作区误删都可以恢复，但只能恢复到最新版本，会丢失最近一次提交后修改的内容

分支管理：
在没创建分支之前，由master指针指向每次的commit然后组成一条时间线以此可以确定master的提交点，然后HEAD指针指向master表示当前在master分支
当创建了一个分支dev，即增加了一个dev指针指向当前的提交点，然后HEAD指向dev表示在dev分支上，此后在dev上的提交都是dev指针移动而master不动，当
dev上完成后，就可以合并分支到master，然后再删除dev指针（即删除dev分支）
推荐把master设置为Release版本，dev设置为Debug版本，然后所有人在dev分支上再拉取分支干活，再合并到dev分支，稳定后再合并到master分支

14.创建新分支:git branch branch_name
15.切换到新分支:git checkout branch_name
16.创建并切换分支:git checkout -b branch_name
17.查看分支:git branch [-a/-r]  #-r查看远程仓库分支
18.合并分支:<!!必须先在分支上添加并提交，再切换到master分支进行合并操作> git merge branch_name    #合并后master指向branch_name，这成为快速合并
19.删除分支:git branch -d branch_name
20.分支冲突解决办法：
当在分支上修改并提交后，切换回master上也修改了相同的地方并提交后，此时分支和master都有了新的提交，这时再执行合并就会有冲突,这时Git无法执行快速合并，只能试图把各自的修改合并起来，然后需要使用git diff查看不同并在master上确定冲突的地方怎么解决然后重新提交，此时分支和master都会指向最新的提交点

21.分支管理策略:git merge branch_name --no-ff -m 'commit'  #--no-ff用来禁用Fast forward模式，因此必须跟-m选项并且加注释，
该选项会生成一个新的提交点，并且master和分支都会指向该新提交点

22.BUG修复分支:假设当前在一个分支工作，当release版本出现bug需要紧急修复，但是分支上面的工作没完成不能提交，
    1）使用git stash存储当前工作区，然后切换回release所在分支，并创建bug临时分支，修改完后提交再删除临时分支
    2）查看工作区存储状态:git stash list
    3）恢复工作区:git stash apply,但是该命令不会删除保存的stash内容，要用git stash drop删除，也可以使用git stash pop恢复并删除
23.删除一个没合并过的分支:git branch -D branch_name,该情况发生在需要增加新功能 ，但是分支已完成后又通知要取消该新功能，所以该分支需要删除

github:
现在本地有了一个Git仓库，可以在github上创建一个Git仓库，并让这两个仓库进行远程同步，这样github上的仓库既可已作为备份，也可以让别人通过该仓库协作，
一般是先创建远程库，再通过克隆到本地，进行多人协作开发
        ----------------------------------------------->(pull)
        ->(fetch/clone)         ->(checkout)
远程仓库                本地仓库                            工作区 
        <-(push)                <-(commit) 暂存区 <-(add)

14.本地仓库与github仓库关联：git remote add origin git@github.com:yourname/yourrepository.git     #添加后远程仓库的名字在本地就被视为origin，这是Git默认的叫法，也可以改为其他，但是推荐使用origin因为一看就知道是远程仓库

15.推送本地仓库内容到远程仓库:git push [-u] orgin master     # [-u] 只是第一次推送时使用，这样Git会把本地和远程的master分支也关联起来!!!
16.从远程仓库克隆:git clone [-o 自定义远程主机名来替代默认origin] git@github.com:user_name/repository_name.git [本地目录名]       #推荐使用git://因为使用ssh协议且原生速度更快
17.管理远程主机名:git remote [-v]／show/add/rm/rename + 主机名
18.将远程仓库有更新的取回本地:git fetch remote_host_name [branch_name]   #如果没指定分支则会取回所有分支到本地仓库，但不影响工作区
19.取回远程仓库某个分支并与本地分支合并:git pull remote_host_name remote_branch:local_branch  #如果local_branch是当前分支，则冒号后可省略,等于先fetch再merge
20.建立追踪关系:git branch --set-upstream master origin/master #将本地master分支与远程仓库master分支关联起来，其实git clone会自动建立，当建立了追踪关系，git pull就可以省略远程分支名
